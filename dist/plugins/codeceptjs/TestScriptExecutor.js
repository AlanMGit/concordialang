"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CodeceptJSOptionsBuilder_1 = require("./CodeceptJSOptionsBuilder");
const path = require("path");
const fse = require("node-fs-extra");
const childProcess = require("child_process");
const util_1 = require("util");
const fs_1 = require("fs");
/**
 * Executes test scripts generated by Concordia using CodeceptJS.
 *
 * @author Matheus Eller Fagundes
 * @author Thiago Delgado Pinto
 */
class TestScriptExecutor {
    /**
     * Executes the script according to the options given.
     *
     * @param options Execution options
     */
    execute(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!options.sourceCodeDir) {
                fse.mkdirs(options.sourceCodeDir);
            }
            // It's only possible to run CodeceptJS if there is a 'codecept.json' file in the folder.
            const filePath = path.join(options.sourceCodeDir || '.', 'codecept.json');
            const writeF = util_1.promisify(fs_1.writeFile);
            yield writeF(filePath, JSON.stringify({}));
            const outputFile = path.join(options.executionResultDir || '.', 'output.json');
            let testCommand = this.generateTestCommand(options, outputFile);
            const code = yield this.runCommand(testCommand);
            return outputFile;
        });
    }
    /**
     * Generates a command that calls CodeceptJS and can be executed in a terminal.
     *
     * @param options Execution options
     * @param outputFile Output file where test results will be written
     * @throws Error
     */
    generateTestCommand(options, outputFile) {
        if (!options.sourceCodeDir) {
            throw new Error('Source code directory is missing!');
        }
        if (!options.executionResultDir) {
            throw new Error('Execution result directory is missing!');
        }
        const commandOptions = new CodeceptJSOptionsBuilder_1.CodeceptJSOptionsBuilder()
            .withOutputFile(outputFile)
            .value(); //TODO: Accept CodeceptJS options.
        const optionsStr = this.escapeJson(JSON.stringify(commandOptions));
        return `codeceptjs run --reporter mocha-multi --override "${optionsStr}" -c ${options.sourceCodeDir} --colors`;
    }
    escapeJson(json) {
        return JSON.stringify({ _: json }).slice(6, -2);
    }
    runCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {
                // stdio: 'inherit', // <<< not working on windows!
                shell: true
            };
            // Splits the command into pieces to pass to the process;
            //  mapping function simply removes quotes from each piece
            let cmds = command.match(/[^"\s]+|"(?:\\"|[^"])+"/g)
                .map(expr => {
                return expr.charAt(0) === '"' && expr.charAt(expr.length - 1) === '"' ? expr.slice(1, -1) : expr;
            });
            const runCMD = cmds[0];
            cmds.shift();
            return new Promise((resolve, reject) => {
                const child = childProcess.spawn(runCMD, cmds, options);
                child.stdout.on('data', (chunk) => {
                    console.log(chunk.toString());
                });
                child.stderr.on('data', (chunk) => {
                    console.warn(chunk.toString());
                });
                child.on('exit', (code) => {
                    resolve(code);
                });
            });
        });
    }
}
exports.TestScriptExecutor = TestScriptExecutor;
