import { CmdRunner } from './CmdRunner';
import { TestScriptExecutionOptions } from '../../modules/testscript/TestScriptExecution';
import { CodeceptJSOptionsBuilder } from './CodeceptJSOptionsBuilder';
import * as path  from "path";
import * as fse from 'node-fs-extra';

/**
 * Executes test scripts generated by Concordia using CodeceptJS.
 *
 * @author Matheus Eller Fagundes
 */
export class TestScriptExecutor {

    constructor( private _cmd: CmdRunner ) {
    }

    /**
     * Executes the script according to the options given.
     *
     * @param options Execution options
     */
    public async execute( options: TestScriptExecutionOptions ): Promise< any > {

        if ( !! options.sourceCodeDir ) {
            fse.mkdirs( options.sourceCodeDir );
        }
        // It's only possible to run CodeceptJS if there is a 'codecept.json' file in the folder.
        const filePath: string = path.join( options.sourceCodeDir || '.', 'codecept.json' );
        await fse.writeJson( filePath, {} );

        const outputFile = path.join( options.executionResultDir || '.', 'output.json' );
        let testCommand: string = this.generateTestCommand( options, outputFile );
        return this._cmd.run( testCommand )
            .then( () => {
                return outputFile;
            } );
    }

    /**
     * Generates a command that calls CodeceptJS and can be executed in a terminal.
     *
     * @param options Execution options
     * @param outputFile Output file where test results will be written
     * @throws Error
     */
    public generateTestCommand( options: TestScriptExecutionOptions, outputFile: string ): string {
        if ( ! options.sourceCodeDir ) {
            throw new Error( 'Source code directory is missing!' );
        }
        if ( ! options.executionResultDir ) {
            throw new Error( 'Execution result directory is missing!' );
        }
        const commandOptions: object = new CodeceptJSOptionsBuilder()
            .withOutputFile( outputFile )
            .value(); //TODO: Accept CodeceptJS options.
        const optionsStr: string = this.escapeJson( JSON.stringify( commandOptions ) );
        return `codeceptjs run --reporter mocha-multi --override "${optionsStr}" -c ${ options.sourceCodeDir }`;
    }

    private escapeJson( json: string ): string {
        return JSON.stringify( { _: json} ).slice( 6, -2 );
    }

}
